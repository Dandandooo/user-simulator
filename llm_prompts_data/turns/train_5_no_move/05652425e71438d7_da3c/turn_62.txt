Imagine you, the COMMANDER, are an embodied agent in a simulated world. Your purpose is to instruct a robot, named DRIVER, to do tasks for
you by telling it what to do and interrupting it to give further instruction when necessary. Your job here is to predict when
you should be giving instructions to the DRIVER based on turn history with the DRIVER. If there is nothing to do or say, you
should just observe.

Dialogue histories may also include dialogue actions to further clarify the dialogue. A single
utterance may have one or more dialogue acts (most have only one). The possible dialogue acts are:

[
 'Acknowledge the other's utterance', # Category: Generic. Example: "perfect." Mostly follower
 'Affirm',      # Category: Generic. Example: "yes." Mostly commander
 'AlternateQuestions', # Category: Object/Location. Example: "yellow or blue mug?" Mostly follower
 'Confirm', # Category: Generic. Example: "Should I clean the cup?" Mostly follower
 'Deny',    # Category: Generic. Example: "no." Mostly commander
 'FeedbackNegative', # Category: feedback. Example: "that is not correct." Almost entirely commander
 'FeedbackPositive', # Category: feedback. Example: "great job." Almost entirely commander
 'Greetings/Salutations', # Category: Generic. Example: "hello." Even commander/follower
 'InformationOnObjectDetails', # Category: Object/Location. Example: "knife is behind the sink." Almost entirely commander
 'InformationOther', # Category: Generic. Example: "Mug is already clean." Mostly commander
 'Instruction', # Category: Instruction. Example: "fill the mug with coffee." Almost entirely commander
 'MiscOther', # Category: Generic. Example: "ta-da." Even commander/follower
 'NotifyFailure', # Category: Interface. Example. "not able to do that." Almost entirely follower
 'OtherInterfaceComment', # Category: Interface. Example: "which button opens drawer?" Even commander/follower
 'RequestForInstruction', # Category: Instruction. Example: "what should I do today?" Almost entirely follower
 'RequestForObjectLocationAndOtherDetails', # Category: Object/Location. Example: "where is the mug?" Almost entirely follower
 'RequestMore', # Category: Instruction. Example: "Is there anything else to do?" Almost entirely follower
 'RequestOtherInfo' # Category: Instruction. Example: "how many slices of tomato?" Almost entirely follower
]

Example :
Goal: Put all AlarmClock on any Bed.
COMMANDER: <observe>
DRIVER: how may i help? <<RequestForInstruction>>
COMMANDER: Hi, today I'd like to gather all my alarm clocks on my bed please <<Greetings/Salutations,Instruction>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: of course <<Acknowledge>>
COMMANDER: <observe>
DRIVER: <pickup AlarmClock>
COMMANDER: <observe>
DRIVER: <putdown Bed>
COMMANDER response:
InformationOnObjectDetails

Example :
Goal: Clean all the Cloths.
COMMANDER: <observe>
DRIVER: hi <<Greetings/Salutations>>
COMMANDER: Clean all the clothes <<Instruction>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: where are they? <<RequestForObjectLocationAndOtherDetails>>
COMMANDER: im not sure <<InformationOther>>
DRIVER: <observe>
COMMANDER: i think this is a glitch <<OtherInterfaceComment>>
DRIVER: <observe>
COMMANDER: im going to finish it <<InformationOther>>
DRIVER: <observe>
COMMANDER response:
OBSERVE

Example :
Goal: Make a plate of toast.
COMMANDER: We need to make a slice of toast <<Instruction>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: Hello, what tasks do I do today? <<Greetings/Salutations,RequestForInstruction>>
COMMANDER: find knife <<Instruction>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: Please find it for me. <<RequestForObjectLocationAndOtherDetails>>
COMMANDER: other side of middle table, there are two charirs <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: in one of the chairs, there is knife <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: <pickup Knife>
COMMANDER response:
Affirm

Example :
Goal: Clean all the Plates.
COMMANDER: <observe>
DRIVER: Hello. How can I help? <<Greetings/Salutations,RequestForInstruction>>
COMMANDER: Could you help me clean all the plates <<Instruction>>
DRIVER: <observe>
COMMANDER response:
InformationOnObjectDetails

Example :
Goal: Clean all the Bowls.
COMMANDER: <observe>
DRIVER: how can i help? <<RequestForInstruction>>
COMMANDER: clean all bowls <<Instruction>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: ok <<Acknowledge>>
COMMANDER response:
OBSERVE

Your job is to respond to a given dialogue/action history with only one Dialogue act or OBSERVE.
Either return the dialogue act, or return the OBSERVE action. Return only one word/phrase.


Goal: Prepare breakfast.
COMMANDER: <observe>
DRIVER: Whats the task? <<RequestForInstruction>>
COMMANDER: prepare coffee in a clean mug <<Instruction>>
DRIVER: <observe>
COMMANDER: mug is just beside the stove <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: take the mug and clean itin the wash basin <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: <pickup Mug>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: <toggle off Faucet>
COMMANDER: <observe>
DRIVER: <pickup Tomato>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: <pickup Mug>
COMMANDER: <observe>
DRIVER: <putdown Sink>
COMMANDER: <observe>
DRIVER: <pickup Mug>
COMMANDER: <observe>
DRIVER: <putdown Sink>
COMMANDER: <observe>
DRIVER: <toggle on Faucet>
COMMANDER: <observe>
DRIVER: <toggle off Faucet>
COMMANDER: <observe>
DRIVER: <pickup Mug>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: <pickup Mug>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: <pickup Mug>
COMMANDER: <observe>
DRIVER: <pour Sink>
COMMANDER: pour out thewater inside the cup <<Instruction>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: <putdown CoffeeMachine>
COMMANDER: place the clean mug and turn on to fill with coffee <<Instruction>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: <pickup Mug>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: <pickup Mug>
COMMANDER: <observe>
DRIVER: <pour Sink>
COMMANDER: <observe>
DRIVER: <putdown CoffeeMachine>
COMMANDER: done with coffee <<Acknowledge>>
DRIVER: <observe>
COMMANDER: now take the bread which is just beside the stove <<Instruction,InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: slice it with knife <<Instruction>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: <pickup Bread>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: knife?? <<RequestForObjectLocationAndOtherDetails>>
COMMANDER: knife is just below thw coffee maker <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: on the chair <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: <pickup Knife>
COMMANDER: <observe>
DRIVER: <slice Bread>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: <pickup Bread>
COMMANDER: <observe>
DRIVER: next <<RequestForInstruction>>
COMMANDER: toast 2 slices of bread <<Instruction>>
DRIVER: <observe>
COMMANDER: toaster is on the right side to the stove <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: <putdown Toaster>
COMMANDER: <observe>
DRIVER: <pickup Bread>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: <pickup Bread>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: <pickup Bread>
COMMANDER: <observe>
DRIVER: <putdown Toaster>
COMMANDER: <observe>
DRIVER: <pickup Bread>
COMMANDER: <observe>
DRIVER: <putdown CounterTop>
COMMANDER: <observe>
DRIVER: plate?? <<RequestForObjectLocationAndOtherDetails>>
COMMANDER: plate is inside the shelf below the wash basin <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: right side one <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: <open Drawer>
COMMANDER: <observe>
DRIVER: <close Drawer>
COMMANDER: <observe>
DRIVER: <open Drawer>
COMMANDER: right side <<InformationOnObjectDetails>>
DRIVER: <observe>
COMMANDER: <observe>
DRIVER: <close Drawer>
COMMANDER: <observe>
DRIVER: <open Cabinet>
COMMANDER response: